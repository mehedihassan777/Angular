{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authSer, router) {\n    this.authSer = authSer;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.authSer.isAuthenticated().then(authenticated => {\n      if (authenticated) {\n        return true;\n      } else {\n        this.router.navigate(['/']);\n      }\n    });\n  }\n  canActivateChild(childRoute, state) {\n    return this.canActivate(childRoute, state);\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac\n});","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,SAAS;EAElBC,YAAoBC,OAAoB,EAAUC,MAAc;IAA5C,YAAO,GAAPD,OAAO;IAAuB,WAAM,GAANC,MAAM;EAAY;EACpEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,OAAO,IAAI,CAACJ,OAAO,CAACK,eAAe,EAAE,CAACC,IAAI,CAAEC,aAAsB,IAAI;MAClE,IAAIA,aAAa,EAAE;QACf,OAAO,IAAI;OACd,MACI;QACD,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;;IAEnC,CAAC,CAAC;EACN;EAEAC,gBAAgB,CAACC,UAAkC,EAAEN,KAA0B;IAC3E,OAAO,IAAI,CAACF,WAAW,CAACQ,UAAU,EAAEN,KAAK,CAAC;EAC9C;;;mBAhBSN,SAAS;AAAA;;SAATA,SAAS;EAAAa,SAATb,SAAS;AAAA","names":["AuthGuard","constructor","authSer","router","canActivate","route","state","isAuthenticated","then","authenticated","navigate","canActivateChild","childRoute","factory"],"sourceRoot":"","sources":["C:\\Users\\Admin\\Desktop\\Angular\\routing-start\\src\\app\\auth-guard.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate, CanActivateChild {\r\n\r\n    constructor(private authSer: AuthService, private router: Router) { }\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\r\n        return this.authSer.isAuthenticated().then((authenticated: boolean) => {\r\n            if (authenticated) {\r\n                return true;\r\n            }\r\n            else {\r\n                this.router.navigate(['/']);\r\n            }\r\n        });\r\n    }\r\n\r\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\r\n        return this.canActivate(childRoute, state);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class DropdownDirective {\n  toggleOpen(event) {\n    this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;\n    console.log(this.elRef.nativeElement.contains(event.target));\n  }\n  constructor(elRef) {\n    this.elRef = elRef;\n    this.isOpen = false;\n  }\n}\nDropdownDirective.ɵfac = function DropdownDirective_Factory(t) {\n  return new (t || DropdownDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nDropdownDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: DropdownDirective,\n  selectors: [[\"\", \"appDropdown\", \"\"]],\n  hostVars: 2,\n  hostBindings: function DropdownDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function DropdownDirective_click_HostBindingHandler($event) {\n        return ctx.toggleOpen($event);\n      }, false, i0.ɵɵresolveDocument);\n    }\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"open\", ctx.isOpen);\n    }\n  }\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,iBAAiB;EAEgBC,UAAU,CAACC,KAAY;IACjE,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,KAAK,CAACC,aAAa,CAACC,QAAQ,CAACJ,KAAK,CAACK,MAAM,CAAC,GAAG,CAAC,IAAI,CAACJ,MAAM,GAAG,KAAK;IACpFK,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,KAAK,CAACC,aAAa,CAACC,QAAQ,CAACJ,KAAK,CAACK,MAAM,CAAC,CAAC;EAC9D;EACAG,YAAoBN,KAAiB;IAAjB,UAAK,GAALA,KAAK;IALE,WAAM,GAAG,KAAK;EAKA;;AAN9BJ,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAW;EAAAC;EAAAC;IAAA;;eAAjBC,sBAAkB;MAAA","names":["DropdownDirective","toggleOpen","event","isOpen","elRef","nativeElement","contains","target","console","log","constructor","selectors","hostVars","hostBindings","ctx"],"sourceRoot":"","sources":["C:\\Users\\Admin\\Desktop\\Angular\\project1\\src\\app\\shared\\dropdown.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostBinding, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[appDropdown]'\n})\nexport class DropdownDirective {\n  @HostBinding('class.open') isOpen = false;\n  @HostListener('document:click', ['$event']) toggleOpen(event: Event) {\n    this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;\n    console.log(this.elRef.nativeElement.contains(event.target))\n  }\n  constructor(private elRef: ElementRef) { }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}